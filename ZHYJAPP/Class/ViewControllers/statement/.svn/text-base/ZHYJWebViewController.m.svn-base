
//  ZHYJWebViewController.m
//  ZHYJAPP
//
//  Created by admin on 16/4/27.
//  Copyright © 2016年 admin. All rights reserved.
//

#import "ZHYJWebViewController.h"
#import "NetworkManager.h"
#import "DataManager.h"
#import "DataEncoding.h"
#import "ZHYJLocalCache.h"
#import "ZHYJLoginViewController.h"
#import <CoreLocation/CoreLocation.h>
//#import <CloudPushSDK/CloudPushSDK.h>
#import "Reachability.h"
#import "RedpacketViewControl.h"

#import "MyVC.h"
#import "ReportDetaiVC.h"
#import "ProductOfVC.h"
#import "PlanView.h"
#import "NavView.h"
#import "UIWebView+JavaScriptAlert.h"
#import "UIImage+UIimage.h"

static NSString *const sUserIconKey = @"UserIcon";

@interface ZHYJWebViewController () <UIWebViewDelegate, UIImagePickerControllerDelegate,CLLocationManagerDelegate>
{
    UIWebView *_webView;
    NSString  *_urlString;
    NSMutableDictionary *_userIcon;
    CLLocationManager *_locationManager;
    NSMutableArray *userLocationArr;
    NSString *timeStr;
    PlanView *_planView;
    
}

@property (nonatomic,retain) NSURLConnection *aSynConnection;
@property (nonatomic,retain) NSInputStream *inputStreamForFile;
@property (nonatomic,retain) NSString *photoFilePath;


@end

@implementation ZHYJWebViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // 设置导航栏
    [self setNav];
    // 首次进来，加载销售报表
    [self loadWebview:@"saletab.html"];
    
}

#pragma mark -- init

- (void)setNav{
 

    NavView *navView = [[NavView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 44) withButtonTag:^(NSInteger buttonTag) {
        
        NSLog(@"%zd",buttonTag);
        
        switch (buttonTag) {
            case 8:{
    
                MyVC *myVC = [[MyVC alloc] init];
                myVC.urlSS = @"myset.html";
                [self.navigationController pushViewController:myVC animated:YES];
            }
                break;
            case 9:{
                
                [self createPlanView];
            }
                break;
            case 10:{
                
                [self loadWebview:@"saletab.html"];
            }
                break;
            case 11:{
                
                [self loadWebview:@"dproduct-tab.html"];
            }
                break;
            case 12:{
                
                [self loadWebview:@"product-count.html"];

            }
                break;
                
            default:
                break;
        }
        
    }];
    self.navigationItem.titleView = navView;
  
}


- (void)createPlanView{
    
    if (!_planView) {
        _planView = [[PlanView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 80) withButtonTag:^(NSInteger tag) {
            
            NSString *tempStr;
            if (tag == 21) {
                
                tempStr = @"report/cnArrange.html";
                
            }
            if (tag == 22) {
                
                tempStr = @"report/cnShipment.html";
            }
            
            if (tempStr) {
                
                ProductOfVC *proVC = [[ProductOfVC alloc] init];
                proVC.urlS = tempStr;
                [self.navigationController pushViewController:proVC animated:YES];
                
                [_planView removeFromSuperview];
            }
            
            
        }] ;

    }
    
     [self.view addSubview:_planView];
   
}

- (void)loadWebview:(NSString *)urlStr{
    
    
    if (!_webView) {
        
        _webView = [UIWebView initWithSet];
        _webView.delegate = self;
       
        [self.view addSubview:_webView];
    }
    
    
    NSString *mainBundlePath = [[NSBundle mainBundle] bundlePath];
    NSString *htmlPath = [NSString stringWithFormat:@"%@/%@", mainBundlePath,urlStr];
    NSURLRequest *request = [[NSURLRequest alloc] initWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"file://%@",[htmlPath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]]];
    
    [_webView loadRequest:request];
    
    _userIcon = [NSMutableDictionary dictionary];
    [DataManager sharedDataManager].putDic = [NSMutableDictionary dictionary];
    
    
}


#pragma mark -- CLLocationManagerDelegate
//定位
- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray<CLLocation *> *)locations
{
    CLLocation *location = [locations lastObject];
    CLLocationCoordinate2D coordinate = location.coordinate;
    NSString *latitude = [NSString stringWithFormat:@"%f", coordinate.latitude];
    NSString *longitude = [NSString stringWithFormat:@"%f", coordinate.longitude];
    //    NSLog(@"纬度:%@", latitude);
    [self userLocationTrans:longitude latitude:latitude];
    // 2.停止定位
    [manager stopUpdatingLocation];
}
//谷歌地图经纬度转百度地图经纬度
- (void)userLocationTrans:(NSString *)longitude latitude:(NSString *)latitude
{
    //    NSString *str = [NSString stringWithFormat:@"http://api.map.baidu.com/ag/coord/convert?from=0&to=4&x=%@&y=%@", longitude, latitude];
    //    NSLog(@"--%@", str);
    //请求接口转换经纬度
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"http://api.map.baidu.com/ag/coord/convert?from=0&to=4&x=%@&y=%@", longitude, latitude]];
    
    NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:[NSURLRequest requestWithURL:url] completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        NSLog(@"loca%@  *****%@", error, response);
        if (error == nil) {
            NSDictionary *resultDic = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:nil];
            if (![[resultDic allKeys] containsObject:@"error"]) {
                NSString *longitude = [DataEncoding decodeInBase64:resultDic[@"x"]];
                NSString *latitude = [DataEncoding decodeInBase64:resultDic[@"y"] ];
                //        NSLog(@"---更改后的坐标: %@, %@", longitude, latitude);
                userLocationArr = [NSMutableArray array];
                [userLocationArr addObject:longitude];
                [userLocationArr addObject:latitude];
                [DataManager sharedDataManager].userLocation = userLocationArr;
            }
            
        }else{
        }
    }];
    [task resume];
}

#pragma mark -- UIWebViewDelegate
//准备加载，拦截url
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
{//多次调用shouldStartLoad,是因为js文件里使用了自定义url的方式
    NSString *requestString = [[request URL] absoluteString];
    NSLog(@"--------requestString:%@", requestString);
    //根据
    
    
   
    NSArray *urlS = @[@"report/cnOrderDetail.html", @"report/cnSaleOrderReport.html",@"chinaWare-alyz_three.html?key=cc", @"chinaWare-alyz_Ram.html", @"chinaWare-alyz.html?key=jq", @"chinaWare-alyz.html?key=jl", @"chinaWare-alyz.html?key=nt", @"chinaWare-alyz.html?key=cx", @"chinaWare-alyz_three.html?key=cc", @"chinaWare-alyz_three.html?key=zn", @"chinaWare-alyz_three.html?key=cxsh", @"chinaWare-alyz_three.html?key=sc", @"chinaWare-alyz_three.html?key=pb"];
    for (NSString *Urlstr in urlS) {
        if ([requestString hasSuffix:Urlstr]) {
            
            ReportDetaiVC *reportVC = [[ReportDetaiVC alloc] init];
            reportVC.urlS = Urlstr;
            [self.navigationController pushViewController:reportVC animated:YES];
            
            return NO;
        }
    }
    
    
    
    //提交数据,页面调用app.postData
    if ([requestString hasPrefix:@"posturl"]) {
        [self postDataWithRequestStr:requestString];
        return YES;
    }
    //退出登录,页面调用app.logout
    if ([requestString hasPrefix:@"logouturl"]) {
        NSLog(@"%@", requestString);
        [self logoutWithRequestStr:requestString];
        return YES;
    }
    //调用相机,页面调用jsFunc的photo.takePhoto方法
    if ([requestString hasPrefix:@"takephotourl"]) {
        [self takePhotoWithRequestStr:requestString];
        return YES;
    }
     //自定义时间选择器
    if ([requestString hasSuffix:@"rili"]) {
       

        // 当前控制器不需要使用时间选择器，
        
        return YES;
    }
    //页面切换时调用
    if ([requestString hasPrefix:@"puturl"]) {
        [self putWithRequestStr:requestString];
        return YES;
    }
    //判断是否是红包跳转 是跳转到红包页面
    if ([requestString hasSuffix:@"hongbao.html"]) {
        UIViewController *controller = [RedpacketViewControl changeMoneyController];
        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:controller];
        [self presentViewController:nav animated:YES completion:nil];
    }
    
    return YES;
}



//加载完成
- (void)webViewDidFinishLoad:(UIWebView *)webView {
    //设置body字体，但是会导致页面刷新时有由小变大的渐变效果
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad){
        //        [_webView stringByEvaluatingJavaScriptFromString:@"document.getElementsByTagName('body')[0].style.webkitTextSizeAdjust= '120%'"];
    }else{
    }
    
    //webview加载完成后移除黑色视图，否则会覆盖本地html的导航栏
    //Html当中的js代码会引起内存泄露,设置缓存
    [[NSUserDefaults standardUserDefaults] setInteger:0 forKey:@"WebKitCacheModelPreferenceKey"];
    // WebView放到最上层
    //    [_webView stringByEvaluatingJavaScriptFromString:@"onchangeDate('1')"];
    
    [self.view bringSubviewToFront:_webView];
}

#pragma mark - 与JS交互
//页面切换
- (void)putWithRequestStr:(NSString *)requestString
{
    NSArray  *parts = [requestString componentsSeparatedByString:@"$$$"];
    NSString *key   = [parts objectAtIndex:1];
    NSString *value = [parts objectAtIndex:2];
    NSMutableDictionary *putDic = [NSMutableDictionary dictionaryWithObjectsAndKeys:value, key, nil];
    //将取到的键值对累加到字典
    [[DataManager sharedDataManager].putDic addEntriesFromDictionary:putDic];
    //    NSLog(@"保存的key：%@", putDic[key]);
}

//提交数据
- (void)postDataWithRequestStr:(NSString *)requestString
{
    NSArray  *components = [requestString componentsSeparatedByString:@"$$$"];
    NSString *urlString = [components objectAtIndex:1];//请求路径
    NSString *params = [components objectAtIndex:2];//请求参数
    //    NSString *callback = [components objectAtIndex:3];//回调函数
    NSRange range = [params rangeOfString:@"back"];//匹配得到的下标
    //    NSLog(@"rang:%@",NSStringFromRange(range));
    NSString *callback = [params substringWithRange:range];//截取范围类的字符串
    //    NSLog(@"截取的值为：%@",str);
    
    urlString = [urlString stringByReplacingOccurrencesOfString:@"app.server_address" withString:[DataManager sharedDataManager].hostString];
    urlString = [urlString stringByReplacingOccurrencesOfString:@"app.ou" withString:[DataManager sharedDataManager].userMsg[@"ou"]];
    params = [params stringByReplacingOccurrencesOfString:@"app.ou" withString:[DataManager sharedDataManager].userMsg[@"ou"]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlString]];
    
    //所有网络请求都需要带cookie
    NSString *cookie = [[DataManager sharedDataManager] cookieValue];
    [request setValue:cookie forHTTPHeaderField:@"Cookie"];
    request.HTTPMethod = @"POST";
    //    NSLog(@"%@", request.allHTTPHeaderFields);
    // 设置请求体
    // NSString --> NSData
    
    request.HTTPBody = [params dataUsingEncoding:NSUTF8StringEncoding];
    [NetworkManager networkWithRequest:request completion:^(id responseObject, NSURLResponse *response, NSError *error) {
        if (error == nil) {
            NSString *dataString = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];
            NSString *jsFunc=[callback stringByAppendingFormat:@"%@%@%@",@"(",dataString,@")"];
            // NSLog(@"提交数据jsFunc: %@", jsFunc);
            dispatch_async(dispatch_get_main_queue(), ^{
                [_webView stringByEvaluatingJavaScriptFromString:jsFunc];
            });
        }else{
            
            dispatch_async(dispatch_get_main_queue(), ^{
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"温馨提示" message:@"网络请求错误" delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil];
                [alert show];
            });
        }
    }];
}

//退出登录
- (void)logoutWithRequestStr:(NSString *)requestString
{
    //清除用户信息
    [[DataManager sharedDataManager] clearUsername:nil andPwd:nil];
    [[DataManager sharedDataManager] saveUserMsg:nil];
    [[DataManager sharedDataManager] saveCookie:nil];//清除保存的cookie
    [DataManager sharedDataManager].putDic = nil;
    NSLog(@"user===%@   %@", [[DataManager sharedDataManager] username], [[DataManager sharedDataManager] password]);
    NSHTTPCookie *cookie;
    NSHTTPCookieStorage *storage = [NSHTTPCookieStorage sharedHTTPCookieStorage];
    //遍历清除缓存机制里的所有cookie,有两个cookie元素
    for (cookie in [storage cookies]) {
        [[NSHTTPCookieStorage sharedHTTPCookieStorage] deleteCookie:cookie];
    }
    NSArray *cookieArray = [NSHTTPCookieStorage sharedHTTPCookieStorage].cookies;
    NSLog(@"清除后：%@, %@", cookie, cookieArray);
    //清除UIWebView的缓存
    [[NSURLCache sharedURLCache] removeAllCachedResponses];
    //解除推送绑定
    //    [CloudPushSDK unbindAccount:^(CloudPushCallbackResult *res) {
    //        if (res.success) {
    //            [[NSUserDefaults standardUserDefaults] setObject:nil forKey:@"bindAccount"];
    //            [[NSUserDefaults standardUserDefaults] synchronize];
    //        }
    //    }];
    
    // 跳到登录界面
    ZHYJLoginViewController *loginVC = [ZHYJLoginViewController new];
    //切换rootViewController
    [UIApplication sharedApplication].keyWindow.rootViewController = loginVC;
}

//拍照
- (void)takePhotoWithRequestStr:(NSString *)requestString
{
    if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])
    {
        // 创建UIImagePickerController实例
        UIImagePickerController *imagePickerController = [[UIImagePickerController alloc] init];
        // 设置代理
        imagePickerController.delegate = self;
        // 是否允许编辑（默认为NO）
        //        imagePickerController.allowsEditing = YES;
        imagePickerController.sourceType = UIImagePickerControllerSourceTypeCamera;
        // 设置进入相机时使用前置或后置摄像头
        imagePickerController.cameraDevice = UIImagePickerControllerCameraDeviceRear;
        [self presentViewController:imagePickerController animated:YES completion:nil];
    }
}

#pragma mark - UIImagePickerControllerDelegate
// 完成拍照或图片选取后调用的方法
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
    // 从info中将图片取出
    UIImage  *photoImage = [info objectForKey:UIImagePickerControllerOriginalImage];
    NSData   *imageData = UIImageJPEGRepresentation(photoImage, 0.2);
    
    photoImage = [UIImage fixRotationImage:photoImage];
    //保存照片
    [self savePhoto:photoImage withImageData:imageData];
    [picker dismissViewControllerAnimated:YES completion:nil];
    //    UIImageOrientation xx = photoImage.imageOrientation;
    //转base64
    NSString *imageBase64Str = [imageData base64EncodedStringWithOptions:0];
    //取图片的元数据
    NSDictionary *imageInfo = [info objectForKey:UIImagePickerControllerMediaMetadata];
    //取图片的拍照时间
    NSDictionary *tiffDic = [imageInfo objectForKey:@"{TIFF}"];
    NSDate *dateTime  = [tiffDic objectForKey:@"DateTime"];
    //图片信息存入字典
    NSString *account = [[DataManager sharedDataManager] username];
    [_userIcon setObject:account forKey:@"userAccount"];
    [_userIcon setObject:dateTime forKey:@"photoTime"];
    [_userIcon setObject:imageBase64Str forKey:@"userPhoto"];
    //将字典保存到本地
    [[DataManager sharedDataManager] saveUserIcon:_userIcon];
    
    [self uploadPhotoImage];//上传图片
    
    /*重新调用js显示新的照片,但是me.html页面的方法调不到，因为
     webview当前加载的页面是index.html，me.html只是一个iframe子页面。
     所以只能重新加载me.html页面--通过调用index.html里iframe标签
     */
    [_webView stringByEvaluatingJavaScriptFromString:@"document.getElementById('conter').src='me.html'"];
}

// 取消选取调用的方法
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {
    [self dismissViewControllerAnimated:YES completion:nil];
}
//保存照片
- (void)savePhoto:(UIImage *)photo withImageData:(NSData *)imageData
{
    NSString *docPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0];
    _photoFilePath = [docPath stringByAppendingPathComponent:@"20160711.jpg"];
    [imageData writeToFile:_photoFilePath atomically:YES];
}
//上传照片
- (void)uploadPhotoImage
{
    NSString *serverAddr = [NetworkManager sHostURLString];
    NSString *ou = [DataManager sharedDataManager].userMsg[@"ou"];
    NSString *urlString = [[NSString alloc] initWithFormat:@"%@%@%@%@", serverAddr, @"/", ou, @"/combest_hr.nsf/CBXsp_uploadImg.xsp"];
    NSURL *url = [NSURL URLWithString:urlString];
    // 初始化本地文件路径,并与NSInputStream链接
    self.inputStreamForFile = [NSInputStream inputStreamWithFileAtPath:self.photoFilePath];
    
    // 上传大小
    NSNumber *contentLength;
    contentLength = (NSNumber *) [[[NSFileManager defaultManager] attributesOfItemAtPath:self.photoFilePath error:NULL] objectForKey:NSFileSize];
    
    NSMutableURLRequest *request;
    request = [NSMutableURLRequest requestWithURL:url];
    [request setHTTPMethod:@"POST"];
    [request setHTTPBodyStream:self.inputStreamForFile];
    //设置请求头头域
    [request setValue:@"image/jpg" forHTTPHeaderField:@"Content-Type"];
    [request setValue:[contentLength description] forHTTPHeaderField:@"Content-Length"];
    [request setValue:@"20160711.jpg" forHTTPHeaderField:@"ContentName"];
    //带cookie请求
    NSString *cookie = [[DataManager sharedDataManager] cookieValue];
    
    [request setValue:cookie forHTTPHeaderField:@"Cookie"];
    //    NSLog(@"header:  %@", request.allHTTPHeaderFields);
    // 请求
    //    self.aSynConnection = [NSURLConnection connectionWithRequest:request delegate:self];
    [NetworkManager networkWithRequest:request completion:^(id responseObject, NSURLResponse *response, NSError *error) {
        if (error == nil) {
            //            NSLog(@"上传成功！");
        }else{
            dispatch_async(dispatch_get_main_queue(), ^{
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"请求错误" delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil];
                [alert show];
            });
        }
        
    }];
}

//释放webview
- (void)dealloc
{
    _webView.delegate = nil;
    [_webView stopLoading];
}



@end





