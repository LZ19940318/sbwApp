//
//  NetworkManager.m
//  ZHYJAPP
//
//  Created by admin on 16/4/25.
//  Copyright © 2016年 admin. All rights reserved.
//

#import "NetworkManager.h"
#import "AFNetworking.h"
#import "DataManager.h"
#import "Erro.h"
#import "DataEncoding.h"

static NSString * const sErrorHintString = @"[combest]无效的用户名或密码";
//NSString * const APIBaseURLString = @"http://www.x-zhyj.net/";

@interface NetworkManager ()

@end

@implementation NetworkManager

+ (NSString *)sHostURLString
{
    NSString *hostURLString = [NSString stringWithFormat:@"http://%@", [DataManager sharedDataManager].hostString];
    return hostURLString;
}

- (NSHTTPCookie *)cookieFromTask:(NSURLSessionDataTask *)task
{
    NSHTTPURLResponse *httpResponse = ((NSHTTPURLResponse *)task.response);
    NSHTTPCookie *cookie = [NSHTTPCookie cookiesWithResponseHeaderFields:httpResponse.allHeaderFields forURL:httpResponse.URL].firstObject;
//    NSLog(@"cookieFromTask: %@", cookie);

    return cookie;
}

//cookie存入Storage
+ (void)setHTTPCookie:(NSHTTPCookie *)cookie
{
    NSHTTPCookieStorage *cookieStorage = [NSHTTPCookieStorage sharedHTTPCookieStorage];
    [cookieStorage setCookie:cookie];
}

//登录接口的网络请求
+ (void)loginWithUsename:(NSString *)username password:(NSString *)password completion:(completionType)completion
{
    //AFHTTPSessionManager默认解析的是JSON数据
    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:[self sHostURLString]]];
    manager.securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];
    
    //SessionManager默认解析的是json数据，所以在这里需要调用setResponseSerializer来对URL的处理
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    
    [manager.requestSerializer willChangeValueForKey:@"timeoutInterval"];
    manager.requestSerializer.timeoutInterval = 7.f;
    [manager.requestSerializer didChangeValueForKey:@"timeoutInterval"];
    
    [manager POST:[NSString stringWithFormat:@"%@/names.nsf?login", [self sHostURLString]] parameters:@{@"username":username, @"password": password} progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        
        NSString *responseStr = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];
        NSLog(@"response---%@  ---  %@", responseObject, responseStr);
        NSRange range = [responseStr rangeOfString:sErrorHintString];
 
        if (NSEqualRanges(range, NSMakeRange(NSNotFound, 0))) {
            NSHTTPURLResponse *response = (NSHTTPURLResponse *)task.response;
//            NSLog(@"header: %@", response.allHeaderFields);
            
//            NSArray *cookieArray = [NSHTTPCookie cookiesWithResponseHeaderFields:response.allHeaderFields forURL:response.URL];
//            NSLog(@"登录取出的cookieArray：%@", cookieArray);
            //在头域中取出cookie
            for (NSHTTPCookie *cookie in [NSHTTPCookie cookiesWithResponseHeaderFields:response.allHeaderFields forURL:response.URL]) {
//                NSLog(@"%@", cookie);
                [self setHTTPCookie:cookie];
                //保存cookie
                [[DataManager sharedDataManager] saveCookie:cookie];
            }
            completion(responseObject, nil, nil);
        }else{
            NSError *error;
            NSLog(@"error----%@", error);
            completion(nil, nil, error);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"%@", error);
        completion(nil, nil, error);
    }];
}

//+ (void)fetchOrgUnitWithUserName:(NSString *)username completion:(completionType)completion{
//
//    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:[self sHostURLString]]];
//    manager.securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];
//    
//    //SessionManager默认解析的是json数据，所以在这里需要调用setResponseSerializer来对URL的处理
//    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
//    
//    NSArray *cookieArray = [NSHTTPCookieStorage sharedHTTPCookieStorage].cookies;
//    NSString *cookieValue;
//    //遍历cookie数组，取出每个cookie的neme和value属性并拼接
//    for (NSHTTPCookie *cookie in cookieArray) {
//        NSString *key = cookie.name;
//        NSString *value = cookie.value;
//        if (cookieValue == nil) {
//            cookieValue = [NSString stringWithFormat:@"%@=%@", key, value];
//        }else{
//            cookieValue = [NSString stringWithFormat: @"%@;%@=%@", cookieValue, key, value];
//        }
//    }
//    NSLog(@"====%@", cookieValue);
//    
//    [manager.requestSerializer setValue:cookieValue forHTTPHeaderField:@"cookie" ];
//    NSString *requestStr = [NSString stringWithFormat:@"%@/domcfg.nsf/CBXsp_getServerMsg.xsp?sysName=%@", [self sHostURLString], username];
//    
//    [manager GET:requestStr parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject){
//        NSLog(@"%@", manager.requestSerializer.HTTPRequestHeaders);
////        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
//        NSString *dataString = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];
//        completion(dataString, nil, nil);
//    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error){
//        completion(nil, nil, error);
//    }];
////    [manager GET:@"domcfg.nsf/CBXsp_getzuzhidanyuan.xsp" parameters:@{@"sysName": username} success:^ void(NSURLSessionDataTask * task, id data) {
////        
////        NSError *error;
////      
////        
////    } failure:^(NSURLSessionDataTask * task, NSError * error) {
////        
////    }];
//}

//用户信息
+ (void)getUserMsgWithTime:(NSString *)time completion:(completionType)completion
{
    //combesterpdemo/外网hjxx   /内网/combestbkc
    NSLog(@"testOU%@", [DataManager sharedDataManager].ou);
    [[AFHTTPSessionManager manager] POST:[NSString stringWithFormat:@"%@/combestbkc/combest_mopcontroller.nsf/CBXsp_getUserMsg.xsp?", [self sHostURLString]] parameters:@{@"time":time} progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
    //解析json
//        NSDictionary *result = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingAllowFragments error:nil];
    NSMutableDictionary *result = (NSMutableDictionary *)responseObject;
    //删除照片base64字符串的多余的特殊字符
    NSString *photo = result[@"photo"];
        NSLog(@"poto====%@", result);
    photo = [photo stringByReplacingOccurrencesOfString:@"\r\n" withString:@""];
    NSString *mail = result[@"mail"];
    mail = [mail stringByReplacingOccurrencesOfString:@"\\" withString:@"//"];
    //需要通过新创建一个字典来修改，直接修改result[@"photo"]会造成越界
    NSMutableDictionary * resultCopy = [[NSMutableDictionary alloc] initWithDictionary:result];
    [resultCopy setObject:photo forKey:@"photo"];
    [resultCopy setObject:mail forKey:@"mail"];
    result = resultCopy;
    [[DataManager sharedDataManager] saveUserMsg:result];
    
    NSMutableDictionary *userIcon = [[DataManager sharedDataManager] userIcon];
    NSMutableDictionary *userIconCopy = [NSMutableDictionary dictionaryWithDictionary:userIcon];
    NSString *str = resultCopy[@"photo"];
    [userIconCopy setObject:str forKey:@"userPhoto"];
    [[DataManager sharedDataManager] saveUserIcon:userIconCopy];
    
    completion(responseObject, nil, nil);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
//        Erro *err = [[Erro alloc] initWithErro:error];
        NSLog(@"error-=-=%@----", error);
        completion(nil, nil, error);
    }];
}

+ (void)getUpdateVersion:(completionType)completion
{
    //NSURLSession默认是异步的
    NSString *urlString = [NSString stringWithFormat:@"%@/app/iosversion.xml", [self sHostURLString]];
    NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithURL:[NSURL URLWithString:urlString] completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        if (error == nil) {
            completion(data, nil, nil);
        }else{
            completion(nil, nil, error);
        }
    }];
    [task resume];
}

//cookie失效,掉线重连
//判断返回的数据是否包含错误提示字段，不包含则返回当前的结果，包含则需要重新发送登录请求，成功后重新转发当前请求。
//+ (void)networkWithRequest:(NSMutableURLRequest *)request completion:(completionType)completion
//{
//    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:[self sHostURLString]]];
//    manager.securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];
//    
//    //SessionManager默认解析的是json数据，所以在这里需要调用setResponseSerializer来对URL的处理
//    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
//
//    [manager POST:[request.URL absoluteString] parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//            
//            NSString *resultStr = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];
//            NSRange range = [resultStr rangeOfString:sErrorHintString];
//            if (range.location == NSNotFound) {
//                completion(responseObject, task.response, nil);
//            }else{
//                NSString *password = [[DataManager sharedDataManager] password];
//                password = [DataEncoding decodeInBase64:password];
//                password = [DataEncoding decryptUseDES:password key:@"password"];
//                [self loginWithUsename:[[DataManager sharedDataManager] username] password:password completion:^(id responseObject, NSURLResponse *response, NSError *error) {
//                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
//                    NSLog(@"statusCode: %ld", (long)httpResponse.statusCode);
//                    if (error == nil) {
//                        //登录后重新发送该请求
//                        NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response,  NSError * _Nullable error) {
//                            if (error == nil) {
//                                completion(data, response, nil);
//                            }
//                        }];
//                        [task resume];
//                    }
//                    
//                    }];
//            }
//        
//    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
//        completion(@"", nil, error);
//    }];
//}
//获取环信用户的信息
+ (void)requireUserMessageWithRequest:(NSString *)request completion:(completionType)completion
{
    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:[self sHostURLString]]];
//    manager.securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];

    //SessionManager默认解析的是json数据，所以在这里需要调用setResponseSerializer来对URL的处理
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];

    [manager POST:request parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {

            NSString *resultStr = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];
            NSRange range = [resultStr rangeOfString:sErrorHintString];
            if (range.location == NSNotFound) {
                completion(responseObject, task.response, nil);
            }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        completion(@"", nil, error);
    }];
}

+ (void)networkWithRequest:(NSMutableURLRequest *)request completion:(completionType)completion
{
    NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        NSString *resultStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
//        NSLog(@"测试是否会死循环：！！！");
        if (error == nil) {
            if (data) {
                NSRange range = [resultStr rangeOfString:sErrorHintString];
                if (range.location == NSNotFound) {
                    completion(data, response, nil);
                }else{
                    NSString *username = [[DataManager sharedDataManager] username];
                    NSString *password = [[DataManager sharedDataManager] password];
                    password = [DataEncoding decodeInBase64:password];
                    password = [DataEncoding decryptUseDES:password key:@"password"];
                    [self loginWithUsename:username password:password completion:^(id responseObject, NSURLResponse *response, NSError *error) {
                        if (error == nil) {
                            NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
                            NSLog(@"statusCode: %ld", (long)httpResponse.statusCode);
                            
                            //登录后重新发送该请求
                            NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response,  NSError * _Nullable error) {
                                completion(data, response, nil);
                            }];
                            [task resume];
                        }
                        
                    }];
                }
            }else{
                completion(@"", nil, error);
            }
        }else{
            completion(@"", nil, error);
        }
    }];
    [task resume];
}


@end





